// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mywordoftheday

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MyWordOfTheDayServiceClient is the client API for MyWordOfTheDayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyWordOfTheDayServiceClient interface {
	// Heartbeat
	//
	// Provides information about the service health
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	// AddWord
	//
	// Adds a new word
	AddWord(ctx context.Context, in *AddWordRequest, opts ...grpc.CallOption) (*AddWordResponse, error)
	// ListWords
	//
	// Lists words
	ListWords(ctx context.Context, in *ListWordsRequest, opts ...grpc.CallOption) (*ListWordsResponse, error)
	// DeleteWord
	//
	// Deletes a Word
	DeleteWord(ctx context.Context, in *DeleteWordRequest, opts ...grpc.CallOption) (*DeleteWordResponse, error)
	// RandomWord
	//
	// Returns a word at random
	RandomWord(ctx context.Context, in *RandomWordRequest, opts ...grpc.CallOption) (*RandomWordResponse, error)
}

type myWordOfTheDayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMyWordOfTheDayServiceClient(cc grpc.ClientConnInterface) MyWordOfTheDayServiceClient {
	return &myWordOfTheDayServiceClient{cc}
}

func (c *myWordOfTheDayServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/mywordoftheday.v1alpha1.MyWordOfTheDayService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWordOfTheDayServiceClient) AddWord(ctx context.Context, in *AddWordRequest, opts ...grpc.CallOption) (*AddWordResponse, error) {
	out := new(AddWordResponse)
	err := c.cc.Invoke(ctx, "/mywordoftheday.v1alpha1.MyWordOfTheDayService/AddWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWordOfTheDayServiceClient) ListWords(ctx context.Context, in *ListWordsRequest, opts ...grpc.CallOption) (*ListWordsResponse, error) {
	out := new(ListWordsResponse)
	err := c.cc.Invoke(ctx, "/mywordoftheday.v1alpha1.MyWordOfTheDayService/ListWords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWordOfTheDayServiceClient) DeleteWord(ctx context.Context, in *DeleteWordRequest, opts ...grpc.CallOption) (*DeleteWordResponse, error) {
	out := new(DeleteWordResponse)
	err := c.cc.Invoke(ctx, "/mywordoftheday.v1alpha1.MyWordOfTheDayService/DeleteWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWordOfTheDayServiceClient) RandomWord(ctx context.Context, in *RandomWordRequest, opts ...grpc.CallOption) (*RandomWordResponse, error) {
	out := new(RandomWordResponse)
	err := c.cc.Invoke(ctx, "/mywordoftheday.v1alpha1.MyWordOfTheDayService/RandomWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyWordOfTheDayServiceServer is the server API for MyWordOfTheDayService service.
// All implementations should embed UnimplementedMyWordOfTheDayServiceServer
// for forward compatibility
type MyWordOfTheDayServiceServer interface {
	// Heartbeat
	//
	// Provides information about the service health
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	// AddWord
	//
	// Adds a new word
	AddWord(context.Context, *AddWordRequest) (*AddWordResponse, error)
	// ListWords
	//
	// Lists words
	ListWords(context.Context, *ListWordsRequest) (*ListWordsResponse, error)
	// DeleteWord
	//
	// Deletes a Word
	DeleteWord(context.Context, *DeleteWordRequest) (*DeleteWordResponse, error)
	// RandomWord
	//
	// Returns a word at random
	RandomWord(context.Context, *RandomWordRequest) (*RandomWordResponse, error)
}

// UnimplementedMyWordOfTheDayServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMyWordOfTheDayServiceServer struct {
}

func (UnimplementedMyWordOfTheDayServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedMyWordOfTheDayServiceServer) AddWord(context.Context, *AddWordRequest) (*AddWordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWord not implemented")
}
func (UnimplementedMyWordOfTheDayServiceServer) ListWords(context.Context, *ListWordsRequest) (*ListWordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWords not implemented")
}
func (UnimplementedMyWordOfTheDayServiceServer) DeleteWord(context.Context, *DeleteWordRequest) (*DeleteWordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWord not implemented")
}
func (UnimplementedMyWordOfTheDayServiceServer) RandomWord(context.Context, *RandomWordRequest) (*RandomWordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandomWord not implemented")
}

// UnsafeMyWordOfTheDayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyWordOfTheDayServiceServer will
// result in compilation errors.
type UnsafeMyWordOfTheDayServiceServer interface {
	mustEmbedUnimplementedMyWordOfTheDayServiceServer()
}

func RegisterMyWordOfTheDayServiceServer(s *grpc.Server, srv MyWordOfTheDayServiceServer) {
	s.RegisterService(&_MyWordOfTheDayService_serviceDesc, srv)
}

func _MyWordOfTheDayService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyWordOfTheDayServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mywordoftheday.v1alpha1.MyWordOfTheDayService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyWordOfTheDayServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyWordOfTheDayService_AddWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyWordOfTheDayServiceServer).AddWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mywordoftheday.v1alpha1.MyWordOfTheDayService/AddWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyWordOfTheDayServiceServer).AddWord(ctx, req.(*AddWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyWordOfTheDayService_ListWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyWordOfTheDayServiceServer).ListWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mywordoftheday.v1alpha1.MyWordOfTheDayService/ListWords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyWordOfTheDayServiceServer).ListWords(ctx, req.(*ListWordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyWordOfTheDayService_DeleteWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyWordOfTheDayServiceServer).DeleteWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mywordoftheday.v1alpha1.MyWordOfTheDayService/DeleteWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyWordOfTheDayServiceServer).DeleteWord(ctx, req.(*DeleteWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyWordOfTheDayService_RandomWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyWordOfTheDayServiceServer).RandomWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mywordoftheday.v1alpha1.MyWordOfTheDayService/RandomWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyWordOfTheDayServiceServer).RandomWord(ctx, req.(*RandomWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyWordOfTheDayService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mywordoftheday.v1alpha1.MyWordOfTheDayService",
	HandlerType: (*MyWordOfTheDayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _MyWordOfTheDayService_Heartbeat_Handler,
		},
		{
			MethodName: "AddWord",
			Handler:    _MyWordOfTheDayService_AddWord_Handler,
		},
		{
			MethodName: "ListWords",
			Handler:    _MyWordOfTheDayService_ListWords_Handler,
		},
		{
			MethodName: "DeleteWord",
			Handler:    _MyWordOfTheDayService_DeleteWord_Handler,
		},
		{
			MethodName: "RandomWord",
			Handler:    _MyWordOfTheDayService_RandomWord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mywordoftheday/v1alpha1/mywordoftheday.proto",
}
