// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mywordoftheday/v1alpha1/mywordoftheday.proto

package mywordoftheday

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on HeartbeatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *HeartbeatRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// HeartbeatRequestValidationError is the validation error returned by
// HeartbeatRequest.Validate if the designated constraints aren't met.
type HeartbeatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeartbeatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeartbeatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeartbeatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeartbeatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeartbeatRequestValidationError) ErrorName() string { return "HeartbeatRequestValidationError" }

// Error satisfies the builtin error interface
func (e HeartbeatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeartbeatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeartbeatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeartbeatRequestValidationError{}

// Validate checks the field values on HeartbeatResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *HeartbeatResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// HeartbeatResponseValidationError is the validation error returned by
// HeartbeatResponse.Validate if the designated constraints aren't met.
type HeartbeatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeartbeatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeartbeatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeartbeatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeartbeatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeartbeatResponseValidationError) ErrorName() string {
	return "HeartbeatResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HeartbeatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeartbeatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeartbeatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeartbeatResponseValidationError{}

// Validate checks the field values on AddWordRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AddWordRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetWord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddWordRequestValidationError{
				field:  "Word",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddWordRequestValidationError is the validation error returned by
// AddWordRequest.Validate if the designated constraints aren't met.
type AddWordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddWordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddWordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddWordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddWordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddWordRequestValidationError) ErrorName() string { return "AddWordRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddWordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddWordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddWordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddWordRequestValidationError{}

// Validate checks the field values on AddWordResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddWordResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetWord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddWordResponseValidationError{
				field:  "Word",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddWordResponseValidationError is the validation error returned by
// AddWordResponse.Validate if the designated constraints aren't met.
type AddWordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddWordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddWordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddWordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddWordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddWordResponseValidationError) ErrorName() string { return "AddWordResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddWordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddWordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddWordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddWordResponseValidationError{}

// Validate checks the field values on ListWordsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListWordsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListWordsRequestValidationError is the validation error returned by
// ListWordsRequest.Validate if the designated constraints aren't met.
type ListWordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWordsRequestValidationError) ErrorName() string { return "ListWordsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListWordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWordsRequestValidationError{}

// Validate checks the field values on ListWordsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListWordsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetWords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWordsResponseValidationError{
					field:  fmt.Sprintf("Words[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListWordsResponseValidationError is the validation error returned by
// ListWordsResponse.Validate if the designated constraints aren't met.
type ListWordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWordsResponseValidationError) ErrorName() string {
	return "ListWordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWordsResponseValidationError{}

// Validate checks the field values on DeleteWordRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteWordRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteWordRequestValidationError is the validation error returned by
// DeleteWordRequest.Validate if the designated constraints aren't met.
type DeleteWordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWordRequestValidationError) ErrorName() string {
	return "DeleteWordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWordRequestValidationError{}

// Validate checks the field values on DeleteWordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteWordResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetWord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteWordResponseValidationError{
				field:  "Word",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteWordResponseValidationError is the validation error returned by
// DeleteWordResponse.Validate if the designated constraints aren't met.
type DeleteWordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWordResponseValidationError) ErrorName() string {
	return "DeleteWordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWordResponseValidationError{}

// Validate checks the field values on RandomWordRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RandomWordRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RandomWordRequestValidationError is the validation error returned by
// RandomWordRequest.Validate if the designated constraints aren't met.
type RandomWordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RandomWordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RandomWordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RandomWordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RandomWordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RandomWordRequestValidationError) ErrorName() string {
	return "RandomWordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RandomWordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRandomWordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RandomWordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RandomWordRequestValidationError{}

// Validate checks the field values on RandomWordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RandomWordResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetWords()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RandomWordResponseValidationError{
				field:  "Words",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RandomWordResponseValidationError is the validation error returned by
// RandomWordResponse.Validate if the designated constraints aren't met.
type RandomWordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RandomWordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RandomWordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RandomWordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RandomWordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RandomWordResponseValidationError) ErrorName() string {
	return "RandomWordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RandomWordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRandomWordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RandomWordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RandomWordResponseValidationError{}

// Validate checks the field values on Word with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Word) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Word

	// no validation rules for CustomDefinition

	return nil
}

// WordValidationError is the validation error returned by Word.Validate if the
// designated constraints aren't met.
type WordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WordValidationError) ErrorName() string { return "WordValidationError" }

// Error satisfies the builtin error interface
func (e WordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WordValidationError{}
